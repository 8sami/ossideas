// DBML for OSSIdeas Database Schema
// Generated on: 2025-06-25 (Revised: Introduced 'ideas' table, renamed 'repositories', fixed M:N Refs)

// --- Core Entities ---

Table users {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique user identifier, generated by PostgreSQL.']
  email varchar(255) [unique, not null, note: 'User\'s email address, must be unique.']
  name varchar(255) [note: 'User\'s display name.']
  created_at timestamptz [default: `now()`, note: 'Timestamp when the user record was created.']
  updated_at timestamptz [default: `now()`, note: 'Last timestamp when the user record was updated.']
  is_premium boolean [default: false, note: 'Flag indicating if the user has premium access.']
  stripe_customer_id varchar(255) [unique, note: 'Unique ID from Stripe for billing purposes.']
  github_id varchar(255) [unique, note: 'GitHub user ID, if authenticated via GitHub.']
  linkedin_id varchar(255) [unique, note: 'LinkedIn user ID, if authenticated via LinkedIn.']
  last_login_at timestamptz [note: 'Timestamp of the user\'s last login.']
  preferences jsonb [note: 'Stores user-specific settings or preferences in a flexible JSON format.']
  position varchar(255) [note: 'User\'s professional position or role.']
  interests text[] [note: 'Array of user-selected areas of interest.']

  Note: 'Stores user authentication and profile information.'
}

Table repositories {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique internal repository identifier.']
  github_repo_id bigint [unique, not null, note: 'The unique ID assigned by GitHub to the repository.']
  owner varchar(255) [not null, note: 'GitHub repository owner (username/organization).']
  name varchar(255) [not null, note: 'The name of the GitHub repository.']
  full_name varchar(511) [unique, not null, note: 'Combined owner/name (e.g., openai/whisper).']
  description text [note: 'The description provided on GitHub for the repository.']
  html_url varchar(1023) [unique, not null, note: 'The URL to the GitHub repository.']
  stargazers_count int [default: 0, note: 'Number of stars the repository has.']
  forks_count int [default: 0, note: 'Number of times the repository has been forked.']
  watchers_count int [default: 0, note: 'Number of users watching the repository.']
  open_issues_count int [default: 0, note: 'Number of open issues in the repository.']
  license_key varchar(100) [note: 'SPDX identifier for the repository\'s license (e.g., mit).']
  license_name varchar(255) [note: 'Full name of the repository\'s license.']
  last_commit_at timestamptz [note: 'Timestamp of the most recent commit to the repository.']
  created_at_github timestamptz [note: 'Timestamp when the repository was created on GitHub.']
  updated_at_github timestamptz [note: 'Last timestamp GitHub updated the repository\'s metadata.']
  is_archived boolean [default: false, note: 'Flag indicating if the repository is archived on GitHub.']
  topics text[] [note: 'An array of tags/topics associated with the repository on GitHub (PostgreSQL specific).']
  readme_content text [note: 'The content of the repository\'s README file, used for AI analysis.']
  scanned_at timestamptz [default: `now()`, note: 'Last time this repository was scanned by the n8n workflow.']
  data_quality_score decimal(5,2) [note: 'Internal score for data completeness/freshness.']
  is_ai_agent_project boolean [default: false, note: 'Flag if identified as an AI Agent related repository.']
  additional_metadata jsonb [note: 'Any other non-standard or variable metadata from the GitHub API.']
  document_vectors tsvector [note: 'Generated for Full-Text Search on description and readme.']

  Note: 'Stores comprehensive data extracted from open-source repositories (the "raw material" for ideas).'
}

// --- Ideas & Analyses ---

Table ideas {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for a product opportunity idea.']
  repository_id uuid [not null, note: 'Links to the source repository (from repositories) this idea is based on.']
  title varchar(511) [not null, note: 'The main, user-facing title of the product idea (e.g., "AI-powered Market Research Platform").']
  summary text [note: 'A high-level summary of the product idea.']
  overall_teardown_score decimal(5,2) [note: 'The aggregated score for this entire idea, potentially from multiple analyses.']
  likes_count int [default: 0, note: 'Total number of likes this idea has received from users.']
  is_premium boolean [default: true, note: 'Flag indicating if this entire idea requires premium access.']
  status varchar(50) [default: 'pending_generation', note: 'Current status of the idea (e.g., "pending_generation", "generated", "review_needed", "published", "archived", "failed_generation").']
  generated_at timestamptz [default: `now()`, note: 'Timestamp when this idea was initially generated.']
  last_updated_at timestamptz [default: `now()`, note: 'Last timestamp when the idea (or any of its analyses) was updated.']
  generated_by_ai_model varchar(100) [note: 'The primary AI model that initially generated this idea.']

  Note: 'Represents a monetizable product opportunity derived from an open-source repository, which can comprise multiple analyses.'
}

Table analysis_types {
  id int [pk, increment, note: 'Unique identifier for the analysis type.']
  name varchar(100) [unique, not null, note: 'User-friendly name of the analysis type (e.g., "Monetization Teardown", "SWOT Analysis").']
  description text [note: 'A detailed description of what this analysis type entails.']
  slug varchar(100) [unique, not null, note: 'URL-friendly slug for the analysis type.']
  created_at timestamptz [default: `now()`, note: 'Timestamp when the analysis type was created.']
  updated_at timestamptz [default: `now()`, note: 'Last timestamp when the analysis type was updated.']

  Note: 'Defines and categorizes the different kinds of AI-generated analyses the platform can produce (e.g., SWOT, Target Market).'
}

Table analysis_results {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for this specific analysis component.']
  idea_id uuid [not null, note: 'Links to the product idea (from ideas) that this analysis component belongs to.']
  analysis_type_id int [not null, note: 'Specifies the type of analysis (e.g., Monetization Teardown, Technical Deep Dive).']
  title varchar(511) [not null, note: 'A concise title for this specific analysis component (e.g., "SWOT Analysis for XYZ Idea").']
  summary_description text [note: 'A brief overview of the findings of this particular analysis component.']
  overall_score decimal(5,2) [note: 'A score specific to this analysis type (e.g., technical viability score) if applicable.']
  analysis_payload jsonb [not null, note: 'The core fluid column: Stores all the specific details of this analysis component as a flexible JSON document. Its structure depends on analysis_type_id.']
  generated_by_ai_model varchar(100) [note: 'The specific AI model used to generate this analysis component.']
  generated_at timestamptz [default: `now()`, note: 'Timestamp when this analysis component was generated by AI.']
  curated_by_user_id uuid [note: 'The user ID of the internal team member who curated or reviewed this specific analysis component.']
  document_vectors tsvector [note: 'Generated for Full-Text Search on title and summary description.']

  Note: 'Stores individual AI-generated analysis components (e.g., SWOT, Target Market) that together form a complete product idea.'
}

// --- Categorization ---

Table categories {
  id int [pk, increment, note: 'Unique identifier for the category.']
  name varchar(255) [unique, not null, note: 'The name of the category (e.g., "AI Agents", "Data Visualization").']
  description text [note: 'A brief description of the category.']
  slug varchar(255) [unique, not null, note: 'URL-friendly slug for the category, used in SEO.']
  total_repositories int [default: 0, note: 'Total number of repositories classified in this category.']
  avg_business_score decimal(5,2) [note: 'Average business potential score of ideas in this category.']
  market_size text [note: 'Description or estimate of the market size for this category.']
  growth_rate decimal(5,2) [note: 'Estimated annual growth rate for this category.']
  top_repository_id uuid [note: 'ID of a featured top repository for this category, if any.']
  total_stars_in_category bigint [default: 0, note: 'Total cumulative stars of all repositories in this category.']
  category_insights jsonb [note: 'Flexible JSON field for storing additional analytical insights for the category.']

  Note: 'Stores predefined categories to classify open-source repositories.'
}

Table repository_categories { // Renamed from oss_project_categories
  repository_id uuid [pk, note: 'Foreign key linking to the repositories table.']
  category_id int [pk, note: 'Foreign key linking to the categories table.']

  Note: 'Junction table for many-to-many relationship between repositories and categories.'
}

// --- User Features ---

Table user_saved_ideas {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for the saved idea entry.']
  user_id uuid [not null, note: 'The user who saved this idea.']
  idea_id uuid [not null, note: 'The ID of the product idea (from ideas) that was saved.']
  saved_at timestamptz [default: `now()`, note: 'Timestamp when the idea was saved by the user.']
  notes text [note: 'Personal notes or comments added by the user to the saved idea.']
  status varchar(50) [default: 'saved', note: 'Status of the saved idea (e.g., "saved", "considering", "discarded").']

  Note: 'Tracks which product ideas a user has saved for their "Ideapad" feature.'
}

Table subscriptions {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for the subscription record.']
  user_id uuid [unique, not null, note: 'The user associated with this subscription. One user can have only one active subscription record.']
  plan_type varchar(50) [not null, note: 'The type of subscription plan (e.g., "free", "pro", "enterprise").']
  stripe_subscription_id varchar(255) [unique, note: 'The unique subscription ID from Stripe.']
  start_date timestamptz [not null, note: 'The date and time when the subscription started.']
  end_date timestamptz [note: 'The date and time when the subscription is set to end (for fixed terms).']
  is_active boolean [default: true, note: 'Flag indicating if the subscription is currently active.']
  canceled_at timestamptz [note: 'Timestamp when the subscription was canceled.']

  Note: 'Manages user subscription details and links to billing information for premium access control.'
}

// --- Content Distribution ---

Table email_digests {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for the email digest.']
  digest_date date [unique, not null, note: 'The date the digest was published (e.g., start of the week).']
  title varchar(511) [note: 'The title of the email digest.']
  content_html text [note: 'The full HTML content of the email digest.']
  sent_at timestamptz [default: `now()`, note: 'Timestamp when the digest was sent.']
  // published_by_user_id uuid [note: 'The ID of the internal user who published the digest.']

  Note: 'Stores information about the weekly or periodic email digests sent to users.'
}

Table digest_ideas { // Renamed from digest_insights
  digest_id uuid [pk, note: 'Foreign key linking to the email_digests table.']
  idea_id uuid [pk, note: 'Foreign key linking to the ideas table.']
  position_in_digest int [note: 'The order in which the idea appeared in the digest.']

  Note: 'Junction table linking email_digests with product ideas (i.e., which ideas were included in which digest).'
}

// --- New: Languages table ---
Table languages {
  id int [pk, increment, note: 'Unique identifier for the programming language.']
  name varchar(100) [unique, not null, note: 'Name of the programming language (e.g., "Python", "JavaScript").']
  slug varchar(100) [unique, not null, note: 'URL-friendly slug for the language.']

  Note: 'Stores a list of programming languages for categorizing repositories and user preferences.'
}

// --- New: Junction table for Repository Languages (Many-to-many) ---
Table repository_languages {
  repository_id uuid [pk, note: 'Foreign key linking to the repositories table.']
  language_id int [pk, note: 'Foreign key linking to the languages table.']

  Note: 'Links repositories to the programming languages they use.'
}

// --- New: User Likes for Ideas (Many-to-many) ---
Table user_liked_ideas {
  user_id uuid [pk, note: 'Foreign key linking to the users table.']
  idea_id uuid [pk, note: 'Foreign key linking to the ideas table.']
  liked_at timestamptz [default: 'now', note: 'Timestamp when the user liked the idea.']

  Note: 'Tracks which product ideas a user has liked.'
}

// --- New: Industries table ---
Table industries {
  id int [pk, increment, note: 'Unique identifier for the industry.']
  name varchar(255) [unique, not null, note: 'Name of the industry (e.g., "Fintech", "Healthcare").']
  slug varchar(255) [unique, not null, note: 'URL-friendly slug for the industry.']
  total_ideas_generated int [default: 0, note: 'Total number of ideas generated within this industry.']
  avg_idea_score decimal(5,2) [note: 'Average overall score of ideas in this industry.']
  market_potential text [note: 'Description of the market potential for this industry.']
  industry_growth_rate decimal(5,2) [note: 'Estimated annual growth rate of the industry.']
  top_idea_id uuid [note: 'ID of a featured top idea for this industry, if any.']
  industry_insights jsonb [note: 'Flexible JSON field for storing additional analytical insights for the industry.']

  Note: 'Defines industries for user profiling and industry-specific analytics.'
}

// --- New: Junction table for User Preferred Languages (Many-to-many) ---
Table user_preferred_languages {
  user_id uuid [pk, note: 'Foreign key linking to the users table.']
  language_id int [pk, note: 'Foreign key linking to the languages table.']

  Note: 'Stores programming languages preferred by users.'
}

// --- New: Submitted Repositories table ---
Table submitted_repositories {
  id uuid [pk, default: `uuid_generate_v4()`, note: 'Unique identifier for a submitted repository.']
  user_id uuid [not null, note: 'The user who submitted the repository.']
  github_url varchar(1023) [not null, note: 'The GitHub URL of the submitted repository.']
  status varchar(50) [default: 'pending', note: 'Status of the submission (e.g., "pending", "processing", "accepted", "rejected").']
  submitted_at timestamptz [default: `now()`, note: 'Timestamp when the repository was submitted.']
  processed_at timestamptz [note: 'Timestamp when the submission was processed.']
  notes text [note: 'Internal notes regarding the submission process or rejection reason.']

  Note: 'Tracks repositories submitted by users for idea generation.'
}

// --- New: User Industries table ---
Table user_industries {
  user_id uuid [pk, note: 'Foreign key to users']
  industry_id int [pk, note: 'Foreign key to industries']

  Note: 'Links users to multiple industries (many-to-many).'
}

// --- New: Junction table for Idea Industries (Many-to-many) ---
Table idea_industries {
  idea_id uuid [pk, note: 'Foreign key to ideas']
  industry_id int [pk, note: 'Foreign key to industries']

  Note: 'Links ideas to multiple industries (many-to-many).'
}

// --- New: User Categories table ---
Table user_categories {
  user_id uuid [pk, note: 'Foreign key to users']
  category_id int [pk, note: 'Foreign key to categories']

  Note: 'Links users to multiple categories (many-to-many).'
}

// --- Relationships ---

Ref: users.id - subscriptions.user_id // 1:1 A user has one (current/active) subscription.
Ref: users.id - user_saved_ideas.user_id // 1:N A user can save multiple ideas.
Ref: users.id - analysis_results.curated_by_user_id // 1:N An internal user can curate multiple analysis results.
// Ref: users.id - email_digests.published_by_user_id // 1:N An internal user can publish multiple email digests.

Ref: repositories.id - ideas.repository_id // 1:N One repository can inspire many product ideas.

Ref: ideas.id - analysis_results.idea_id // 1:N One product idea can have multiple analysis components.
Ref: ideas.id - user_saved_ideas.idea_id // 1:N One idea can be saved by many users.
// Ref: ideas.id - digest_ideas.idea_id // 1:N One idea can be included in many email digests.

Ref: analysis_types.id - analysis_results.analysis_type_id // 1:N An analysis type can be applied to many analysis results.

// Many-to-many relationships (explicitly defined with two 1:N refs)
// Repositories <-> Categories
Ref: repositories.id < repository_categories.repository_id // A repository can have multiple categories.
Ref: categories.id < repository_categories.category_id // A category can be assigned to multiple repositories.

// Email Digests <-> Ideas
Ref: email_digests.id < digest_ideas.digest_id // An email digest can contain multiple ideas.
Ref: ideas.id < digest_ideas.idea_id // An idea can be included in multiple email digests.

Ref: "ideas"."overall_teardown_score" < "ideas"."last_updated_at"

Ref: "ideas"."id" < "ideas"."repository_id"

Ref: "ideas"."id" < "ideas"."status"

Ref: "user_saved_ideas"."id" < "user_saved_ideas"."saved_at"

// New Relationships: Repository Languages (Many-to-many)
Ref: repositories.id < repository_languages.repository_id // A repository can have multiple languages.
Ref: languages.id < repository_languages.language_id // A language can be associated with multiple repositories.

// New Relationships: User Likes for Ideas (Many-to-many)
Ref: users.id < user_liked_ideas.user_id // A user can like multiple ideas.
Ref: ideas.id < user_liked_ideas.idea_id // An idea can be liked by multiple users.

// New Relationships: User Preferred Languages (Many-to-many)
Ref: users.id < user_preferred_languages.user_id // A user can prefer multiple languages.
Ref: languages.id < user_preferred_languages.language_id // A language can be preferred by multiple users.

// New Relationships: Categories and Top Repository
Ref: repositories.id - categories.top_repository_id // A category can highlight one top repository.

// New Relationships: Industries and Top Idea
Ref: ideas.id - industries.top_idea_id // An industry can highlight one top idea.

// New Relationships: Submitted Repositories and Users
Ref: users.id - submitted_repositories.user_id // A user can submit multiple repositories.
// New Relationships: User Industries
Ref: users.id < user_industries.user_id // A user can have multiple industries.
Ref: industries.id < user_industries.industry_id // An industry can be associated with multiple users.
// New Relationships: Idea Industries
Ref: ideas.id < idea_industries.idea_id // An idea can belong to multiple industries.
Ref: industries.id < idea_industries.industry_id // An industry can have multiple ideas.
// New Relationships: User Categories
Ref: users.id < user_categories.user_id // A user can have multiple categories.
Ref: categories.id < user_categories.category_id // A category can be associated with multiple users.