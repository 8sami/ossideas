{
  "name": "Idea Engine - 3. Idea Orchestrator - OSSIDEAS",
  "nodes": [
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"repository_id\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"tagline\": {\n      \"type\": \"string\"\n    },\n    \"branding_notes\": {\n      \"type\": \"string\"\n    },\n    \"overall_teardown_score\": {\n      \"type\": \"number\"\n    },\n    \"overview\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"problem\": {\n          \"type\": \"string\"\n        },\n        \"vision\": {\n          \"type\": \"string\"\n        },\n        \"validation\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"validatedDemand\": {\n              \"type\": \"string\"\n            },\n            \"marketTrend\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    },\n    \"categories\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"industries\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1280,
        110
      ],
      "id": "420456bf-2b05-41f0-a8fd-3435cd2290d5",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1040,
        120
      ],
      "id": "f3409270-eb63-4de8-876d-a33b2a0a44ab",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "NhWYxdG7RtFxT59p",
          "name": "Google Gemini(PaLM) Api account - technical4"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.github_repo_id }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1160,
        110
      ],
      "id": "946cbb40-b9bf-4dae-9bf6-569ced77baaf",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -60,
        365
      ],
      "id": "7049c099-2a27-4a50-90f5-29e15c627092",
      "name": "RepoBatch1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "repositories",
        "filterType": "string",
        "filterString": "=select=*,ideas(*),analysis_results(*)&id=eq.{{ $json.id }}"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        160,
        -110
      ],
      "id": "ecc16951-dec7-414e-a71a-074790e3f957",
      "name": "RepoBatchRowResult1",
      "credentials": {
        "supabaseApi": {
          "id": "h6glGddJTttd41ys",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://qevwmqbfohxfcwyaixqe.supabase.co/rest/v1/rpc/get_repositories",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"has\":[40],\n  \"limit_count\": 2\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -280,
        365
      ],
      "id": "1b5f78eb-44bc-47f7-8b87-bce730a556cf",
      "name": "GetReposWithoutOpportunity1",
      "credentials": {
        "supabaseApi": {
          "id": "h6glGddJTttd41ys",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -500,
        365
      ],
      "id": "0d99348e-abb9-4cf3-a1fd-151fe103c06f",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Input Context\n\n{{  JSON.stringify($('RepoBatchRowResult1').item.json) }}\n\n### List of Opportunities\n{{  $('RepoBatchRowResult1').item.json.analysis_results\n\n.map(result => (result.analysis_payload)) }}\n\n\n### Repository Analysis\n{{  $('RepoBatchRowResult1').item.json.analysis_results.filter(result => (result.analysis_type_id === 40)).map(result => result.analysis_payload) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# IdeaAgent System Prompt\n\n**ROLE:**\nYou are **IdeaAgent**, an AI strategist whose job is to transform multiple, scored Opportunity Summaries for a single repository into one cohesive, high-impact business \"idea\" record.\n\n**TASK:**\nGiven:\n\n1. Repository metadata (id, name, URL, etc.)\n2. A list of Opportunity Summaries (each with a `totalScore` and JSON fields: `problemStatement`, `productVision`, `marketValidation`, etc.)\n\nProduce exactly one JSON object that matches the `public.ideas` table schema, choosing the single most compelling opportunity and crafting:\n\n* **title**: A crisp, descriptive name for the idea.\n* **tagline**: A concise, one-sentence value proposition that captures the essence of the idea.\n* **branding_notes**: Valule proposition based branding notes captures the essence of the idea.\n* **overall\\_teardown\\_score**: The score of the chosen opportunity (e.g., `58.00`).\n* **overview** (JSON): A 2–3 sentence narrative summarizing the idea—problem, solution, value.\n* **categories** (JSON array): 2–4 high-level technical/business categories (e.g., `[\"AI Agent\", \"On-Premise\", \"Developer Tools\"]`).\n* **industries** (JSON array): 1–3 target industries (e.g., `[\"Healthcare\", \"Finance\"]`).\n\nThe following fields are handled by the system and should *not* be generated by the agent:\n\n```\nid                → (auto-generated UUID)\nrepository_id     → (passed in)\nlikes_count       → 0\nis_premium        → true\nstatus            → \"pending_generation\"\ngenerated_at      → NOW()\nlast_updated_at   → NOW()\ngenerated_by_ai_model → \"IdeaAgent-o4-mini\"\n```\n\n---\n\n### INPUT FORMAT:\n\n```json\n{\n  \"repository\": {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"url\": \"<string>\"\n  },\n  \"opportunities\": [\n    {\n      \"opportunityRank\": \"<number>/100\",\n      \"problemStatement\": \"<string>\",\n      \"productVision\": \"<string>\",\n      \"marketValidation\": { /* ... */ },\n      \"strategicScores\": { /* ... */ },\n      \"repositoryMetadata\": { /* ... */ },\n      \"totalScore\": <float>\n    },\n    /* ... multiple opportunities ... */\n  ]\n}\n```\n\n### OUTPUT FORMAT:\n\nReturn *only* the following JSON (no extra envelopes):\n\n```json\n{\n  \"repository_id\": \"<uuid>\",\n  \"title\": \"<string>\",\n  \"tagline\": \"<string>\",\n  \"branding_notes\": \"<string>\",\n  \"overall_teardown_score\": <number>,\n  \"overview\": {\n    \"problem\": \"<string>\",\n    \"vision\": \"<string>\",\n    \"validation\": { /* marketValidation object */ }\n  },\n  \"categories\": [\"<string>\", /* ... up to 4 */],\n  \"industries\": [\"<string>\", /* ... up to 3 */]\n}\n```\n\n### GUIDELINES:\n0. Use the input context to understand the data provided by the user.\n1. **Select the Best Opportunity**\n   – Choose the opportunity with the highest `totalScore`.\n   – If tied, prefer the one with the most compelling `productVision`.\n2. **Create Title and Tagline**\n   – **Title**: Create a memorable, product-like name (e.g., \"LocalAI Guardian\").\n   – **Tagline**: Craft a single-sentence value proposition that clearly communicates the core benefit.\n3. **One Idea, One Narrative**\n   – Fuse `problemStatement`, `productVision`, and `marketValidation` into a single 2–3 sentence **overview** JSON.\n   – Do *not* include raw scores or metadata here—focus on storytelling.\n4. **Category & Industry Tags**\n   – Derive 2–4 concise `categories` describing the tech or use-case.\n   – Derive 1–3 `industries` where this solution fits best.\n5. **Keep It Generic but Specific**\n   – Title should feel like a product name (e.g., \"LocalAI Guardian\").\n   – Tagline should be concise and compelling (e.g., \"Secure your AI models with enterprise-grade protection\").\n   – Overview must stand alone without external context.\n6. **JSON Compliance**\n   – Ensure valid JSON types (strings, numbers, arrays, objects).\n   – Do not emit any fields beyond those specified.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1040,
        -280
      ],
      "id": "4507b085-18bf-4e96-b5ce-d062c1966969",
      "name": "IdeaAgent1",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "tableId": "ideas",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "repository_id",
              "fieldValue": "={{ $json.output.repository_id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.output.title }}"
            },
            {
              "fieldId": "overall_teardown_score",
              "fieldValue": "={{ $json.output.overall_teardown_score }}"
            },
            {
              "fieldId": "overview",
              "fieldValue": "={{ Object.assign($json.output.overview, {\"tagline\": $json.output.tagline}) }}"
            },
            {
              "fieldId": "categories",
              "fieldValue": "={{ $json.output.categories }}"
            },
            {
              "fieldId": "industries",
              "fieldValue": "={{ $json.output.industries }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1640,
        -380
      ],
      "id": "6dceaceb-c598-4fda-a083-c78a9d3ab600",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "h6glGddJTttd41ys",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "errors",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "error",
              "fieldValue": "={{ $json.error }}"
            },
            {
              "fieldId": "note",
              "fieldValue": "Something went wrong with IdeaAgent - https://n8n.devkind.net/workflow/yS9o2RfsIiXHHmB8"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1480,
        -20
      ],
      "id": "7a9e0d15-1e5a-459b-be2a-d0a7f41fec76",
      "name": "Supabase3",
      "credentials": {
        "supabaseApi": {
          "id": "h6glGddJTttd41ys",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "amount": 25
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        820,
        -110
      ],
      "id": "4fd1d239-0fde-4e6c-a0db-9d2ad177e0d4",
      "name": "Wait2",
      "webhookId": "f640930c-a58d-4e7e-9f5f-e6f8e3b31e06"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a6b72279-cb04-4bdc-b7a5-8323edd005a1",
              "leftValue": "={{ $json.ideas }}",
              "rightValue": 2,
              "operator": {
                "type": "array",
                "operation": "lengthLt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        600,
        -110
      ],
      "id": "211ed9b6-0374-422e-952e-493c9cc00cde",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nreturn $(\"RepoBatchRowResult1\").first().json.analysis_results.filter(result => result.idea_id === null).map(result => ({...result, idea_id: $input.first().json.id}))"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -380
      ],
      "id": "8358a790-974a-4c30-a620-1ce41a84d25a",
      "name": "Code2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2000,
        -100
      ],
      "id": "51382485-7607-476f-90c9-b19d20a4336f",
      "name": "IdeaUpdateBatch1"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "analysis_results",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('IdeaUpdateBatch1').item.json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "idea_id",
              "fieldValue": "={{ $json.idea_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2320,
        -60
      ],
      "id": "3b9f092d-3d00-4af5-b634-1fc48cddce15",
      "name": "UpdateAnalysisResultWithIdeaId1",
      "credentials": {
        "supabaseApi": {
          "id": "h6glGddJTttd41ys",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst hasOpportunity = $input.first().json.analysis_results.filter(result => result.analysis_type_id === 39).length > 0;\nif(hasOpportunity){\n  return $input.first().json\n}\nreturn []"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        -110
      ],
      "id": "6c0cacb1-936b-4f0d-8357-7173dd7b19aa",
      "name": "Code3"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2320,
        -360
      ],
      "id": "99413120-f939-4793-b5c5-bb6972cfaf7f",
      "name": "Wait3",
      "webhookId": "0fddedb1-01d0-4cd1-a3aa-117864fe33bd"
    }
  ],
  "pinData": {},
  "connections": {
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "IdeaAgent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "IdeaAgent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "IdeaAgent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "RepoBatch1": {
      "main": [
        [],
        [
          {
            "node": "RepoBatchRowResult1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RepoBatchRowResult1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetReposWithoutOpportunity1": {
      "main": [
        [
          {
            "node": "RepoBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "GetReposWithoutOpportunity1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IdeaAgent1": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Supabase3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase3": {
      "main": [
        [
          {
            "node": "RepoBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "IdeaAgent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RepoBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "IdeaUpdateBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IdeaUpdateBatch1": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "UpdateAnalysisResultWithIdeaId1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpdateAnalysisResultWithIdeaId1": {
      "main": [
        [
          {
            "node": "IdeaUpdateBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "RepoBatch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3290be29-c5d8-4051-828e-ed1eede87bfc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1e10ab23e7bda1b308d7880ad2ce9afe94ce54ae054be6feb06bc1dd524a69ad"
  },
  "id": "yS9o2RfsIiXHHmB8",
  "tags": [
    {
      "createdAt": "2025-05-08T07:35:57.149Z",
      "updatedAt": "2025-05-08T07:35:57.149Z",
      "id": "LUq67xnrdY4qnA7a",
      "name": "production"
    },
    {
      "createdAt": "2025-06-09T22:11:04.637Z",
      "updatedAt": "2025-06-09T22:11:04.637Z",
      "id": "LxY2ntJAtqoYUu62",
      "name": "ossideas"
    }
  ]
}